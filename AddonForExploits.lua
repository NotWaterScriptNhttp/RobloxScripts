----------------TODO-----------------
---------Add output redirect---------
-------------------------------------

if getgenv == nil then -- Checks if the users exploit has getgenv which is the main component if this script
    error("Your cheat is not supported!")
    return
end

if _G.gLibLoaded == true then
    warn("Already Loaded!")
    return
end

function AddToGlobal(name,func)
    getgenv()[name] = func
end

local SuppressWarnings = getgenv()["SuppressWarnings"] == true and nil or true -- this is inverted so i can do if statement without "not SuppressWarnings"

function AddStringAddon()
    setReadonly(string,false)

    function string.startsWith(str,match)
        local portion = string.sub(str,1,#match)

        return portion == match
    end

    function string.endsWith(str,match)
        local portion = string.sub(str,#str-#match,#str)

        return portion == match
    end

    setReadonly(string,true)
end

AddToGlobal("MyExploit", function ()
    return (secure_load and "Sentinel") or (KRNL_LOADED and "KRNL") or (syn and "SynapseX") or (is_protosmasher_caller and "ProtoCrasher") or (is_sirhurt_closure and "AssHurt") or (disassemble and "ScriptWare") or "JJSploiter";
end)
AddToGlobal("ProtectGUI", function (GUI)
    if syn then
        syn.protect_gui(GUI)
        return
    end
    if gethui then
        GUI.Parent = gethui()
        return
    end
    if get_hidden_gui then
        GUI.Parent = get_hidden_gui()
        return
    end
    if SuppressWarnings then
        warn("Idk how you can't have anything with GUI when you have getgenv?")
    end
    GUI.Parent = game:GetService("CoreGui")
end)
AddToGlobal("newCClosure", function (func)
    if newcclosure then
        return newcclosure(func)
    end
    if protect_function then
        return protect_function(func)
    end
    return func
end)
AddToGlobal("setReadonly", function (tbl,readonly)
    assert(typeof(tbl) == "table", "Argument #1 expected 'table', got '"..typeof(tbl).."'")
    assert(typeof(readonly) == "boolean", "Argument #2 expected 'boolean', got '"..typeof(readonly).."'")

    if setreadonly then
        setreadonly(tbl,readonly)
    end
    if make_writeable then
        if readonly == true then
            make_readonly(tbl)
        else
            make_writeable(tbl)
        end
    end
end)

AddStringAddon()

AddToGlobal("getNamecallMethod", function (obj)
    if getnamecallmethod then
        return getnamecallmethod()
    end

    assert(typeof(obj) == "Instance", "Argument #1 expected 'Instance', got '"..typeof(obj).."'")

    if obj:IsA("RemoteEvent") then
        return "FireServer"
    elseif obj:IsA("RemoteFunction") then
        return "InvokeServer"
    elseif obj:IsA("BindableEvent") then
        return "Fire"
    elseif obj:IsA("BindableFunction") then
        return "Invoke"
    else
        return "NON_IMPLEMENTED_METHOD"
    end
end)
AddToGlobal("hookFunc", function (old,new)
    if hookfunc or hookfunction then
        local hook = hookfunc or hookfunction
        return hook(old,new)
    end
    if detour_function then
        detour_function(old,new)
        return original_function
    end
end)
AddToGlobal("hookMetatable", function (metatableName,func)
    if string.startsWith(metatableName, "__") == false then
        metatableName = "__"..metatableName
    end

    assert(typeof(getrawmetatable(game)[metatableName]) == "function", "Given metamethod is not valid")

    if metatableName == "__namecall" then
        setfenv(func, {method = getNamecallMethod(nil)})
    end

    if hookmetamethod then
        return hookmetamethod(game,metatableName,func)
    end
    local mt = getrawmetatable(game)
    local old = mt[metatableName]

    setReadonly(mt,false)

    mt[metatableName] = newCClosure(func)

    setReadonly(mt,true)

    return old
end)
AddToGlobal("LoadURL", function (url)
    return loadstring(game:HttpGet(url,true))()
end)

AddToGlobal("Request", function (data)
    for k,v in pairs(getgenv()) do
        if string.endsWith(tostring(k), "request") then
            return v(data) -- a way to call http_request on KRNL
        end
        if typeof(v) == "table" then
            for k,v in pairs(v) do
                if tostring(k) == "request" and typeof(v) == "function" then
                    return v(data) -- this should work for "Synapse, ScriptWare, SirHurt"
                end
            end
        end
    end
end)

AddToGlobal("LocalPlayer",game.Players.LocalPlayer)

AddToGlobal("AddToGlobal", AddToGlobal)

_G.gLibLoaded = true
